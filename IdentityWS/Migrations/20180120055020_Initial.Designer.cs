// <auto-generated />
using IdentityWS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace IdentityWS.Migrations
{
    [DbContext(typeof(IdentityWsDbContext))]
    [Migration("20180120055020_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("IdentityWS.Models.Alias", b =>
                {
                    b.Property<int>("AliasID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BeingID");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("AliasID");

                    b.HasIndex("BeingID");

                    b.ToTable("Aliases");
                });

            modelBuilder.Entity("IdentityWS.Models.Being", b =>
                {
                    b.Property<int>("BeingID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConfirmationToken")
                        .IsRequired();

                    b.Property<DateTime?>("DateConfirmed");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("FailedLoginAttempts");

                    b.Property<DateTime?>("LockedOutUntil");

                    b.Property<string>("PasswordResetToken");

                    b.Property<DateTime?>("PasswordResetTokenValidUntil");

                    b.Property<string>("SaltedHashedPassword")
                        .IsRequired();

                    b.HasKey("BeingID");

                    b.ToTable("Beings");
                });

            modelBuilder.Entity("IdentityWS.Models.BeingClient", b =>
                {
                    b.Property<int>("BeingClientID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BeingID");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("DateCreated");

                    b.HasKey("BeingClientID");

                    b.HasIndex("BeingID");

                    b.ToTable("BeingClients");
                });

            modelBuilder.Entity("IdentityWS.Models.BeingClientDatum", b =>
                {
                    b.Property<int>("BeingClientDatumID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BeingClientID");

                    b.Property<string>("Key")
                        .IsRequired();

                    b.Property<string>("Value");

                    b.HasKey("BeingClientDatumID");

                    b.HasIndex("BeingClientID");

                    b.ToTable("BeingClientData");
                });

            modelBuilder.Entity("IdentityWS.Models.Email", b =>
                {
                    b.Property<int>("EmailID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AliasID");

                    b.Property<string>("BodyHTML");

                    b.Property<string>("BodyText");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateProcessed");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ProcessingError");

                    b.Property<string>("ReplyTo")
                        .HasMaxLength(100);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("EmailID");

                    b.HasIndex("AliasID");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("IdentityWS.Models.LoginAttempt", b =>
                {
                    b.Property<int>("LoginAttemptID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AliasID");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("ErrorMessage");

                    b.HasKey("LoginAttemptID");

                    b.HasIndex("AliasID");

                    b.ToTable("LoginAttempts");
                });

            modelBuilder.Entity("IdentityWS.Models.Alias", b =>
                {
                    b.HasOne("IdentityWS.Models.Being", "Being")
                        .WithMany("Aliases")
                        .HasForeignKey("BeingID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityWS.Models.BeingClient", b =>
                {
                    b.HasOne("IdentityWS.Models.Being", "Being")
                        .WithMany("Clients")
                        .HasForeignKey("BeingID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityWS.Models.BeingClientDatum", b =>
                {
                    b.HasOne("IdentityWS.Models.BeingClient", "BeingClient")
                        .WithMany("Data")
                        .HasForeignKey("BeingClientID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityWS.Models.Email", b =>
                {
                    b.HasOne("IdentityWS.Models.Alias", "To")
                        .WithMany("Emails")
                        .HasForeignKey("AliasID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityWS.Models.LoginAttempt", b =>
                {
                    b.HasOne("IdentityWS.Models.Alias", "Alias")
                        .WithMany("LoginAttempts")
                        .HasForeignKey("AliasID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
